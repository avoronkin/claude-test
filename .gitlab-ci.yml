# GitLab CI/CD Pipeline for Tic-Tac-Toe TypeScript Library

stages:
  - install
  - lint
  - test
  - build
  - release

variables:
  NODE_VERSION: "20"
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm"
  NPM_CONFIG_PREFER_OFFLINE: "true"

# Cache node_modules across jobs
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
    - .npm/

# Install dependencies
install_dependencies:
  stage: install
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# Linting stage
lint:
  stage: lint
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - echo "Running ESLint..."
    - npm run lint
    - echo "Running TypeScript type checking..."
    - npm run typecheck
  only:
    - merge_requests
    - main
    - develop

# Testing stage
test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - echo "Running unit tests with coverage..."
    - npm run test:coverage
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build stage
build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - echo "Building TypeScript library..."
    - npm run clean
    - npm run build
    - echo "Verifying build output..."
    - ls -la dist/
    - ls -la dist/esm/
    - echo "Build completed successfully!"
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Performance testing (optional)
performance_test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  script:
    - echo "Running performance benchmarks..."
    - node -e "
        const { TicTacToe } = require('./dist/index.js');
        console.log('Testing library performance...');
        const start = process.hrtime.bigint();
        for(let i = 0; i < 1000; i++) {
          const game = new TicTacToe();
          game.makeMove(1, 1);
        }
        const end = process.hrtime.bigint();
        const avgMs = Number(end - start) / 1000000 / 1000;
        console.log(\`Average operation time: \${avgMs.toFixed(4)}ms\`);
        if(avgMs > 1) {
          console.error('Performance requirement not met!');
          process.exit(1);
        }
        console.log('âœ… Performance test passed!');
      "
  only:
    - merge_requests
    - main
    - develop
  allow_failure: true

# Release job (runs only on tags)
release:
  stage: release
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  script:
    - echo "Preparing release artifacts..."
    - npm pack
    - echo "Release artifacts ready!"
  artifacts:
    paths:
      - "*.tgz"
      - dist/
    expire_in: 1 month
  only:
    - tags
  when: manual

# Security audit (optional)
security_audit:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - echo "Running npm audit..."
    - npm audit --audit-level=moderate
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Code quality checks
code_quality:
  stage: lint
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - echo "Running additional code quality checks..."
    - npx tsc --noEmit --strict
    - echo "Checking for unused dependencies..."
    - npx depcheck --ignores="@types/*,eslint,jest,ts-jest,terser,rollup,@rollup/plugin-typescript"
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop